#!/bin/bash

# Globally declared vars
readonly K8S_COMPONENTS="../components"
readonly VAGRANT_ROOT_PASS=$(cat ansible/vars.yaml | grep VAGRANT_NON_HASHED_ROOT_PASS: | awk '{print $2}' | sed -e 's/"//g')

function checkDependecies() {
command -v helm >/dev/null 2>&1 || {
 echo >&2 "Helm client is required but it's not installed. Aborting.";
exit 1;
 }
command -v sshpass >/dev/null 2>&1 || {
 echo >&2 "sshpass is required but it's not installed. Aborting.";
exit 1;
 }
command -v kubectl >/dev/null 2>&1 || {
 echo >&2 "kubectl is required but it's not installed. Aborting.";
exit 1;
 }
}
function getKubeConfig() {
local KUBE_CONFIG_DIR="${HOME}/.kube"
[[ ! -d "${KUBE_CONFIG_DIR}" ]] && mkdir -p "${KUBE_CONFIG_DIR}"
[[ -f ${KUBE_CONFIG_DIR}/config ]] && {
 echo -e "\033[1;34mMaking backup of your KUBE config...\033[0m";
cp ${KUBE_CONFIG_DIR}/config ${KUBE_CONFIG_DIR}/config-on-prem.bkp;
}
local PORT=$(vagrant ssh-config master | grep -v Host | tr -s ' ' | cut -d ' ' -f3 | grep ^[0-9])
sshpass -p "${VAGRANT_ROOT_PASS}" scp -P ${PORT} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@127.0.0.1:/etc/kubernetes/admin.conf ${KUBE_CONFIG_DIR}/config
chmod 500 ${KUBE_CONFIG_DIR}/config
}
function isRunning() {
local IS_RUNNING=$(kubectl cluster-info 2> /dev/null | head -1 | awk '{print $4, $5}')
[[ ${IS_RUNNING} != "is running" ]] && {
 echo "Something went wrong, cluster is not running. Aborting.";
exit 1;
 }
}
function configureNginxIngress() {
helm uninstall ingress-nginx-on-prem > /dev/null 2>&1
helm install ingress-nginx-on-prem ${K8S_COMPONENTS}/ingress-nginx --namespace default --set controller.replicaCount=1
#helm install kong-on-prem ${K8S_COMPONENTS}/nginx-ingress --set ingressController.enabled=true --set postgresql.enabled=false --set env.database=off
(($? != 0)) && {
  echo "Kong didn't install with success... Exiting";
  exit 1;
  }
}
function configureNfsProvisioner() {
local K8S_STORAGECLASS_OBJECTS=(class.yaml deployment.yaml rbac.yaml)
echo -e "\033[1;34mDeploying Storage class and Dynamic NFS Provisioner ...\033[0m"
for KUBE in "${K8S_STORAGECLASS_OBJECTS[@]}"
 do kubectl create -f ${K8S_COMPONENTS}/nfs-provisioner/${KUBE}
done
}
function renameContext() {
echo -e "\n\033[1;34mRename and switch context ...\033[0m"
kubectl config rename-context kubernetes-admin@kubernetes kubernetes
kubectl config use-context kubernetes
}

function main() {
  checkDependecies
  getKubeConfig
  isRunning
  configureNfsProvisioner
  configureNginxIngress
  renameContext
}

main
